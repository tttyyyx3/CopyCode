#include "stdAfx.h"
#include "CFindWindow.h"

CFindWindow::CFindWindow(void)
:m_hWnd(NULL), m_classname(NULL)
{
}

CFindWindow::~CFindWindow(void)
{
}

void CFindWindow::FindWin(HWND hwndParent, LPCSTR classname)
{
m_hWnd=NULL;
m_classname=classname;
FindChildClassHwnd(hwndParent,LPARAM(this));
}

BOOL CALLBACK CFindWindow::FindChildClassHwnd(HWND hwndParent,LPARAM lParam)
{
    CFindWindow *pfw = (CFindWindow*)lParam;
    HWND hwnd = FindWindowEx(hwndParent, NULL, pfw->m_classname, NULL);
    if (hwnd) {
        pfw->m_hWnd = hwnd;
        return FALSE; //停止枚举 并返回
    }
    EnumChildWindows(hwndParent, FindChildClassHwnd, lParam); //枚举所有子窗口
return TRUE;
};




	*syj_find 遍历数据库函数
*/
static void ArxProject2syj_find(void)
{
// Add your code for command ArxProject2.syj_find here
//打开数据库并迭代遍历其中的实体.
AcDbObjectId objId;
AcDbDatabase * pDb = acdbHostApplicationServices()->workingDatabase();
AcDbBlockTable *pBlockTable =NULL;
pDb->getBlockTable(pBlockTable, AcDb::kForRead);
AcDbBlockTableRecord *pBlockTableRecord =NULL;
pBlockTable->getAt(ACDB_MODEL_SPACE,pBlockTableRecord, AcDb:: kForRead);
pBlockTable->close();
//迭代器
AcDbBlockTableRecordIterator *pIter = NULL;
pBlockTableRecord->newIterator(pIter); // Create an iterator
for (pIter->start(); !pIter->done(); pIter->step())
{

AcDbEntity *pEntity = NULL;
if (pIter->getEntity(pEntity, AcDb::kForRead) != Acad::eOk)
continue;
if(pEntity->isKindOf(AcDbCircle::desc()))
objId = pEntity->objectId();
}
pBlockTableRecord->close();
}



	GetDlgItemText(IDC_EDITPARAM,m_strParam);
GetDlgItemText(IDC_EDITRUNDIR,m_strRunDir);


	CFileDialog	dlg(TRUE,_T(".exe"),NULL,OFN_DONTADDTORECENT | OFN_ENABLESIZING | OFN_FORCESHOWHIDDEN | OFN_HIDEREADONLY,
_T("可执行文件 (*.exe)|*.exe|所有文件 (*.*)|*.*||"),this);
if (dlg.DoModal() != IDOK)
{
return;
}

CString strExePath(dlg.GetPathName());
SetDlgItemText(IDC_EDITFILEPATH,strExePath);

SetDlgItemText(IDC_EDITRUNDIR,strExePath.Left(strExePath.ReverseFind('\\')+1));




进程快照


	HANDLE hToolhelp = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
if (hToolhelp == INVALID_HANDLE_VALUE)
{
this->MessageBox(_T("获取进程快照失败"));
return	TRUE;
}
PROCESSENTRY32	stProcess = {0};
stProcess.dwSize = sizeof(PROCESSENTRY32);
Process32First(hToolhelp, &stProcess);
for (int i=0;Process32Next(hToolhelp, &stProcess);i++)
{
TCHAR	pszPid[10];
_itot_s(stProcess.th32ProcessID, pszPid,10);
//m_ListProcess.SetItemText(i,0,pszPid);
m_ListProcess.InsertItem(i, pszPid, NULL);
m_ListProcess.SetItemText(i,1,stProcess.szExeFile);
HANDLE	hProcess = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, stProcess.th32ProcessID);
TCHAR	pszProcessPath[MAX_PATH+2];
if (GetModuleFileNameEx(hProcess, NULL, pszProcessPath, MAX_PATH+2))
{
m_ListProcess.SetItemText(i, 2, pszProcessPath);
}
CloseHandle(hProcess);
}
CloseHandle(hToolhelp);

HANDLE hProcess=GetCurrentProcess();



void change_file_date(const char *filename, uLong dosdate, tm_unz tmu_date)
{
   HANDLE hFile;
   FILETIME ftm, ftLocal, ftCreate, ftLastAcc, ftLastWrite;
   hFile = CreateFileA(filename, GENERIC_READ | GENERIC_WRITE,
      0, NULL, OPEN_EXISTING, 0, NULL);
   GetFileTime(hFile, &ftCreate, &ftLastAcc, &ftLastWrite);
   DosDateTimeToFileTime((WORD)(dosdate >> 16),(WORD)dosdate, &ftLocal);
   LocalFileTimeToFileTime(&ftLocal, &ftm);
   SetFileTime(hFile, &ftm, &ftLastAcc, &ftm);
   CloseHandle(hFile);
}





ClipBoardMonitor::ClipBoardMonitor(void)
:m_lock(false)
{
}


ClipBoardMonitor::~ClipBoardMonitor(void)
{
}

void ClipBoardMonitor::StartMonitor()
{
 CreateTimerQueueTimer(&m_timer,NULL,OnTimer,this,0,1000,0);	
}
#define BUFFER 1024
VOID CALLBACK ClipBoardMonitor::OnTimer(LPVOID p , BOOLEAN){
ClipBoardMonitor* a=(ClipBoardMonitor*)p;
if(!a->m_lock)
{
a->m_lock=true;
char buffer[BUFFER];

OpenClipboard(NULL);
HANDLE h= GetClipboardData(CF_TEXT);
::GlobalLock(h);
char* c=(char*)h;
strcpy_s(buffer,c);
::GlobalUnlock(h);	
wchar_t ws[BUFFER];
swprintf(ws, BUFFER, L"%hs", buffer);
MessageBox(NULL,ws,L"TEXT",0);
a->m_lock=false;
}
}

void ClipBoardMonitor::StopMonitor()
{
//::SetWindowsHookEx(WH_
}



	HANDLE hFile = CreateFile(L"C:\\temp.txt", GENERIC_WRITE, 0, NULL, CREATE_NEW, FILE_ATTRIBUTE_NORMAL, NULL);
if(hFile == INVALID_HANDLE_VALUE) {
printf("Unable to open file.");
}
else {
printf("File successfully opened/created.");
}
CloseHandle(hFile);
getchar();




HINSTANCE hinstDLL = ::LoadLibrary(L"E:\\TestCode\\xproj\\xLearn\\Debug\\xHook.dll");

    SetHook(::GetCurrentThreadId());


    HOOKPROC fnMouseProc = (HOOKPROC)GetProcAddress(hinstDLL, "_MouseHookProc@12");
    ::SetWindowsHookEx(WH_MOUSE, fnMouseProc, hinstDLL, 0);

    //::SetWindowsHookEx(WH_MOUSE, fnMouseProc, ::GetModuleHandle(L"xHook.dll"), 0);

    //cin.get();

    MSG msg = {0};

    int count = 0;

    for (;;)
    {
        if (::PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
        {
            if (msg.message == WM_USER + 1)
            {
                std::cout<<"mouse move "<<++count<<std::endl;
            }
            //::TranslateMessage(&msg);
            //::DispatchMessage(&msg);
        }
    }




	vector<string>processNames; //Hold every process available
PROCESSENTRY32 pe32;
pe32.dwSize = sizeof(PROCESSENTRY32);
HANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL); //Create the snapshot
BOOL bProcess = Process32First(hTool32, &pe32); //Call this and see if its valid
if(bProcess == TRUE)
{
while((Process32Next(hTool32, &pe32)) == TRUE) //While processes left to be enumerated
{
processNames.push_back(pe32.szExeFile); //Save process name
if(strcmp(pe32.szExeFile, "notepad.exe") == 0) //Process we want to inject to
{
char* DirPath = new char[MAX_PATH];
char* FullPath = new char[MAX_PATH];

GetCurrentDirectory(MAX_PATH, DirPath); //Holds directory for convenience

sprintf_s(FullPath, MAX_PATH, "%s\\testdll.dll", DirPath); //Copy DLL name in there

HANDLE hProcess = OpenProcess(PROCESS_CREATE_THREAD	| PROCESS_VM_OPERATION	|
PROCESS_VM_WRITE, FALSE, pe32.th32ProcessID);

LPVOID LoadLibraryAddr = (LPVOID)GetProcAddress(GetModuleHandle("kernel32.dll"),
"LoadLibraryA"); //Get LoadLibraryA address

LPVOID LLParam = (LPVOID)VirtualAllocEx(hProcess, NULL, strlen(FullPath),
MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE); //Allocate some memory for DLL string

WriteProcessMemory(hProcess, LLParam, FullPath, strlen(FullPath), NULL); //Write it

CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)LoadLibraryAddr,
LLParam, NULL, NULL); //New thread with LoadLibrary as start and our string as param

CloseHandle(hProcess);
delete [] DirPath;
delete [] FullPath;
}
}
}
CloseHandle(hTool32);
return 0;




	vector<string>processNames; //Hold every process available
PROCESSENTRY32 pe32;
pe32.dwSize = sizeof(PROCESSENTRY32);
HANDLE hTool32 = CreateToolhelp32Snapshot(TH32CS_SNAPALL, NULL); //Create the snapshot
BOOL bProcess = Process32First(hTool32, &pe32); //Call this and see if its valid
if(bProcess == TRUE)
{
while((Process32Next(hTool32, &pe32)) == TRUE) //While processes left to be enumerated
{
processNames.push_back(pe32.szExeFile); //Save process name
if(strcmp(pe32.szExeFile, "notepad.exe") == 0) //Process we want to inject to
{
char* DirPath = new char[MAX_PATH];
char* FullPath = new char[MAX_PATH];

GetCurrentDirectory(MAX_PATH, DirPath); //Holds directory for convenience

sprintf_s(FullPath, MAX_PATH, "%s\\testdll.dll", DirPath); //Copy DLL name in there

HANDLE hProcess = OpenProcess(PROCESS_CREATE_THREAD	| PROCESS_VM_OPERATION	|
PROCESS_VM_WRITE, FALSE, pe32.th32ProcessID);

LPVOID LoadLibraryAddr = (LPVOID)GetProcAddress(GetModuleHandle("kernel32.dll"),
"LoadLibraryA"); //Get LoadLibraryA address

LPVOID LLParam = (LPVOID)VirtualAllocEx(hProcess, NULL, strlen(FullPath),
MEM_RESERVE | MEM_COMMIT, PAGE_READWRITE); //Allocate some memory for DLL string

WriteProcessMemory(hProcess, LLParam, FullPath, strlen(FullPath), NULL); //Write it

CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)LoadLibraryAddr,
LLParam, NULL, NULL); //New thread with LoadLibrary as start and our string as param

CloseHandle(hProcess);
delete [] DirPath;
delete [] FullPath;
}
}
}
CloseHandle(hTool32);
return 0;



	TCHAR pName[MAX_PATH] = TEXT("");
HANDLE proc = OpenProcess(PROCESS_QUERY_INFORMATION | PROCESS_VM_READ, FALSE, pids[i]);
if (proc) {
HMODULE hMod;
DWORD cbNeeded;
if (EnumProcessModules(proc, &hMod, sizeof(hMod), &cbNeeded)) {
GetModuleBaseName(proc, hMod, pName, sizeof(pName)/sizeof(TCHAR));
if (CompareString(LOCALE_USER_DEFAULT, NORM_IGNORECASE, pName, _tcslen(pName), name, nameLen) == CSTR_EQUAL) {
GetModuleInformation(proc, hMod, &modinfo, sizeof(MODULEINFO));
CloseHandle(proc);
freePSAPI();
*base = modinfo.lpBaseOfDll;
return pids[i];
}
}
CloseHandle(proc);


	std::vector<Process> processes;

FileHandler fh;
fh.Open(filename, FileHandler::FILE_READ);
fh.Read(processes);
fh.Close();

SetProcesses(processes);


	process.ExeFile(str.substr(prev, pos-prev));
processes.push_back(process);



 RegisterHotKey(NULL, 1, MOD_ALT | MOD_CONTROL/* | MOD_NOREPEAT*/, VK_BACK); //0x42 is 'b'
    RegisterHotKey(NULL, 2, MOD_ALT | MOD_CONTROL, VK_P);
    RegisterHotKey(NULL, 3, MOD_ALT, VK_DELETE);

// 执行应用程序初始化:
if (!InitInstance (hInstance, nCmdShow))
{
return FALSE;
}


MessageBox(NULL, _T("本工具支持以下热键：\n\
-------------------------------------------------------------------------------------------------\n\
杀掉配置的进程\t\tCtrl+Alt+Backspace(退格键)\n\
打印当前系统进程\tCtrl+Alt+P (文件保存在C:\\CurrentProcesses.txt)\n\
退出本工具\t\tAlt+Delete"),
_T("帮助"), MB_OK);

hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_PROCESSMANAGER));

// 主消息循环:
while (GetMessage(&msg, NULL, 0, 0))
{
if (msg.message == WM_HOTKEY)
        {
UINT uVirtKey = (UINT) HIWORD(msg.lParam);
DispatchHotKey(uVirtKey);
        }

if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
{
TranslateMessage(&msg);
DispatchMessage(&msg);
}
}

return (int) msg.wParam;
}



	_hSelf = ::CreateWindowEx(
WS_EX_ACCEPTFILES | (_notepad_plus_plus_core._nativeLangSpeaker.isRTL()?WS_EX_LAYOUTRTL:0),\
_className,\
TEXT("Notepad++"),\
WS_OVERLAPPEDWINDOW	| WS_CLIPCHILDREN,\
// CreateWindowEx bug : set all 0 to walk around the pb
0, 0, 0, 0,\
_hParent,\
NULL,\
_hInst,\
(LPVOID)this); // pass the ptr of this instantiated object
                                   // for retrieve it in Notepad_plus_Proc from
                                   // the CREATESTRUCT.lpCre
                                   
                                   
            ::SendDlgItemMessage(_hSelf, IDC_MACRO_COMBO, CB_ADDSTRING, 0, (LPARAM)TEXT("Current recorded macro"));   
            
            
            RegCreateKeyEx 
